org: hoangdlv
app: serverless-project05
service: serverless-project05

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  lambdaHashingVersion: 20201221
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'prod'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    PROJECT_NAME: project05
    DIARIES_TABLE: project05-${self:provider.stage}
    S3_BUCKET_NAME: project05-${self:provider.stage}

custom:
  documentation:
    api:
      info:
        version: '1.0.0'
        title: serverless-api
        description: serverless-api
    models:
      - name: CreateDiaryRequest
        contentType: "application/json"
        schema:
          required:
            - title
            - date
            - description
          properties:
            title:
              minLength: 1
              type: string
            date:
              type: string
            description:
              minLength: 1
              type: string
      - name: UpdateDiaryRequest
        contentType: "application/json"
        schema:
          required:
            - title
            - date
            - description
          properties:
            title:
              minLength: 1
              type: string
            date:
              type: string
            description:
              minLength: 1
              type: string
            password:
              minLength: 4
              type: string
            lock:
              type: boolean
      - name: LockDiaryRequest
        contentType: "application/json"
        schema:
          required:
            - password
          properties:
            password:
              minLength: 4
              type: string
      - name: SearchDiariesRequest
        contentType: "application/json"
        schema:
          required:
            - searchValue
          properties:
            searchValue:
              type: string


  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: "*"


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetDiaries:
    handler: src/lambda/http/getDiaries.handler
    events:
      - http:
          method: get
          path: diaries
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-diary-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  GetDiary:
    handler: src/lambda/http/getDiary.handler
    events:
      - http:
          method: get
          path: diary/{diaryId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-get-one-diary-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  SearchDiaries:
    handler: src/lambda/http/searchDiaries.handler
    events:
      - http:
          method: post
          path: diaries/search
          cors: true
          authorizer: Auth
          documentation:
            summary: "Search diaries"
            description: "Search diaries"
            requestModels:
              "application/json": SearchDiariesRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-search-diaries-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  CreateDiary:
    handler: src/lambda/http/createDiary.handler
    events:
      - http:
          method: post
          path: diary
          cors: true
          authorizer: Auth
          documentation:
            summary: "Create a new diary"
            description: "Create a new diary"
            requestModels:
              "application/json": CreateDiaryRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-create-diary-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  UpdateDiary:
    handler: src/lambda/http/updateDiary.handler
    events:
      - http:
          method: patch
          path: diary/{diaryId}
          cors: true
          authorizer: Auth
          documentation:
            summary: "Update a diary"
            description: "Update a diary"
            requestModels:
              "application/json": UpdateDiaryRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-update-diary-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  LockDiary:
    handler: src/lambda/http/lockDiary.handler
    events:
      - http:
          method: patch
          path: diary/{diaryId}/lock
          cors: true
          authorizer: Auth
          documentation:
            summary: "Lock a diary"
            description: "Lock a diary"
            requestModels:
              "application/json": LockDiaryRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-lock-diary-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  UnLockDiary:
    handler: src/lambda/http/unlockDiary.handler
    events:
      - http:
          method: patch
          path: diary/{diaryId}/unlock
          cors: true
          authorizer: Auth
          documentation:
            summary: "Unlock a diary"
            description: "Unlock a diary"
            requestModels:
              "application/json": LockDiaryRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-unlock-diary-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  DeleteDiary:
    handler: src/lambda/http/deleteDiary.handler
    events:
      - http:
          method: delete
          path: diary/{diaryId}
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-delete-diary-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DIARIES_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: diary/{diaryId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.PROJECT_NAME}-s3-upload-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
          - xray:PutTraceSegments 
        Resource: arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    GatewayResponseDefault5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: ApiGatewayRestApi 
    
    DiariesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: diaryId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: diaryId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.DIARIES_TABLE}
    onlyBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'only-body'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.S3_BUCKET_NAME}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 300
   
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.S3_BUCKET_NAME}/*'
        Bucket: !Ref AttachmentsBucket